// ///////////////////////////////////////////////////////////////////////////////////////
// Geometry Visualization Server
// Copyright (c) 2019 Logan Barnes - All Rights Reserved
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// ///////////////////////////////////////////////////////////////////////////////////////
syntax = "proto3";

package gvs.net;

import "google/protobuf/wrappers.proto";
import "primitive_types.proto";

message SceneId {
    string value = 1;
}

message Vec3 {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Mat4 {
    repeated float data = 1;
}

message GeometryFormat {
    Type type = 1;

    enum Type {
        POINTS = 0;
        LINES = 1;
        LINE_STRIP = 2;
        TRIANGLES = 3;
        TRIANGLE_STRIP = 4;
        TRIANGLE_FAN = 5;
    }
}

message Coloring {
    Type type = 1;

    enum Type {
        POSITIONS = 0;
        NORMALS = 1;
        TEXTURE_COORDINATES = 2;
        VERTEX_COLORS = 3;
        UNIFORM_COLOR = 4;
        TEXTURE = 5;
        WHITE = 6;
    }
}

message Shading {
    Type type = 1;

    enum Type {
        UNIFORM_COLOR = 0;
        LAMBERTIAN = 1;
        COOK_TORRANCE = 2;
    }
}

message FloatList {
    repeated float value = 1;
}

message UIntList {
    repeated uint32 value = 1;
}

message SceneIdList {
    repeated SceneId value = 1;
}

message SparseGeometryInfo {
    FloatList positions = 1;
    FloatList normals = 2;
    FloatList texture_coordinates = 3;
    FloatList vertex_colors = 4;
    UIntList indices = 5;
}

message SparseDisplayInfo {
    google.protobuf.StringValue readable_id = 1;
    GeometryFormat geometry_format = 2;
    Mat4 transformation = 3;
    Vec3 uniform_color = 4;
    Coloring coloring = 5;
    Shading shading = 6;
    google.protobuf.BoolValue visible = 7;
    google.protobuf.FloatValue opacity = 8;
    google.protobuf.BoolValue wireframe_only = 9;
}

message Geometry {
    oneof type {
        SparseGeometryInfo info = 1;
        Primitive primitive = 2;
    }
}

message SparseSceneItemInfo {
    Geometry geometry = 1;
    SparseDisplayInfo display_info = 2;
    SceneId parent = 3;
    SceneIdList children = 4;
}

message SparseSceneItemInfoWithId {
    SceneId id = 1;
    SparseSceneItemInfo info = 2;
}

message GeometryInfo {
    FloatList positions = 1;
    FloatList normals = 2;
    FloatList texture_coordinates = 3;
    FloatList vertex_colors = 4;
    UIntList indices = 5;
}

message DisplayInfo {
    google.protobuf.StringValue readable_id = 1;
    GeometryFormat geometry_format = 2;
    Mat4 transformation = 3;
    Vec3 uniform_color = 4;
    Coloring coloring = 5;
    Shading shading = 6;
    google.protobuf.BoolValue visible = 7;
    google.protobuf.FloatValue opacity = 8;
    google.protobuf.BoolValue wireframe_only = 9;
}

message SceneItemInfo {
    GeometryInfo geometry_info = 1;
    DisplayInfo display_info = 2;
    SceneId parent = 3;
    SceneIdList children = 4;
}

message SceneItemInfoWithId {
    SceneId id = 1;
    SceneItemInfo info = 2;
}

message Seed {
    uint32 value = 1;
}
